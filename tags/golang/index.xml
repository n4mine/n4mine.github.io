<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on n4mine&#39;s blog</title>
    <link>https://n4mine.github.io/tags/golang/</link>
    <description>Recent content in golang on n4mine&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 21 Aug 2019 17:48:57 +0800</lastBuildDate>
    
	<atom:link href="https://n4mine.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Get Funcname and Callername in Golang</title>
      <link>https://n4mine.github.io/post/get-funcname-and-callername-in-golang/</link>
      <pubDate>Wed, 21 Aug 2019 17:48:57 +0800</pubDate>
      
      <guid>https://n4mine.github.io/post/get-funcname-and-callername-in-golang/</guid>
      <description>&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;

&lt;p&gt;在 golang 中，往往需要获知当前的函数名及其调用者。&lt;/p&gt;

&lt;p&gt;例如在监控场景，自动获取函数名的需求比较常见。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用sync.Pool引起的case一例</title>
      <link>https://n4mine.github.io/post/a-case-when-using-sync.pool/</link>
      <pubDate>Tue, 27 Feb 2018 15:12:20 +0800</pubDate>
      
      <guid>https://n4mine.github.io/post/a-case-when-using-sync.pool/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;open-falcon的graph模块占用内存太多, 即发起了graph的内存优化，在上线过程中发生了曲线值异常的问题&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>通过pprof获取golang gc信息</title>
      <link>https://n4mine.github.io/post/get-golang-gc-info-by-pprof/</link>
      <pubDate>Sat, 04 Nov 2017 10:23:25 +0000</pubDate>
      
      <guid>https://n4mine.github.io/post/get-golang-gc-info-by-pprof/</guid>
      <description>背景 服务在开启了pprof的情况下，可以使用如下方式，简单粗暴的的获取gc情况 实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/bin/bash _lastNumGC=0 _first=true while : ; do r=$(curl -s</description>
    </item>
    
    <item>
      <title>organizing golang projects and dependencies</title>
      <link>https://n4mine.github.io/post/organizing-golang-projects-and-dependencies/</link>
      <pubDate>Sun, 15 Jan 2017 14:49:18 +0000</pubDate>
      
      <guid>https://n4mine.github.io/post/organizing-golang-projects-and-dependencies/</guid>
      <description>&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;

&lt;p&gt;golang的依赖一直是让人头疼的问题, 大家对其自有的package管理也是褒贬不一&lt;br /&gt;
而对于一个公司内部项目来讲, 主要的需求有以下几点&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;方便的依赖包版本管理&lt;/li&gt;
&lt;li&gt;方便协同开发&lt;/li&gt;
&lt;li&gt;尽可能不依赖其编译所在环境&lt;/li&gt;
&lt;li&gt;除基础包之外, 第三方包尽可能的自包含&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;基于此, 有了本文, 打算以最小的环境变更及工具, 打造一个可协同工作的golang projects&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>