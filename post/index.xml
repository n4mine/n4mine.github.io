<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on n4mine&#39;s blog</title>
    <link>https://n4mine.github.io/post/</link>
    <description>Recent content in Posts on n4mine&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 13 Mar 2022 16:17:20 +0800</lastBuildDate><atom:link href="https://n4mine.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>当可观测遇到serverless</title>
      <link>https://n4mine.github.io/post/observability_and_serverless/</link>
      <pubDate>Sun, 13 Mar 2022 16:17:20 +0800</pubDate>
      
      <guid>https://n4mine.github.io/post/observability_and_serverless/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;可观测（监控）的产品形态，注定了其数据是写 &amp;gt;&amp;gt; 读的&lt;/p&gt;
&lt;p&gt;市面上大多数的技术，均都对写做了大量优化&lt;/p&gt;
&lt;p&gt;而对读却往往“无能为力”，开并发似乎是人们能做到的“极限”，但还是限于单机的瓶颈&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>读《监控的自我修养，过去十年和未来十年》有感</title>
      <link>https://n4mine.github.io/post/reviews_of_monitoring/</link>
      <pubDate>Sat, 19 Feb 2022 11:22:37 +0800</pubDate>
      
      <guid>https://n4mine.github.io/post/reviews_of_monitoring/</guid>
      <description>&lt;p&gt;拜读&lt;a href=&#34;https://mp.weixin.qq.com/s/iOSc4jFRRv61kPdrZ85dnQ&#34;&gt;《监控的自我修养，过去十年和未来十年》&lt;/a&gt;，有一些感想。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nginx 对 2xx 日志采样</title>
      <link>https://n4mine.github.io/post/nginx_sample_log_2xx_only/</link>
      <pubDate>Sat, 11 Sep 2021 09:50:48 +0800</pubDate>
      
      <guid>https://n4mine.github.io/post/nginx_sample_log_2xx_only/</guid>
      <description>&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;p&gt;一些场景下，我们并不需要记录 nginx 所有的 2xx 日志。
但需记录&lt;code&gt;所有&lt;/code&gt; 4xx、5xx。
网上搜索到的方案，要么不记录 2xx，要么采样所有日志，都不满足需求。
下面我们使用 &lt;code&gt;ngx_lua&lt;/code&gt; 来达成这样的目标：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于 1xx、2xx、3xx，按照一定的百分比采样&lt;/li&gt;
&lt;li&gt;对于 4xx、5xx，100% 的记录&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>用 map 实现 nginx 的动态 upstream</title>
      <link>https://n4mine.github.io/post/nginx-dynamic-upstream-use-map/</link>
      <pubDate>Mon, 16 Mar 2020 18:40:57 +0800</pubDate>
      
      <guid>https://n4mine.github.io/post/nginx-dynamic-upstream-use-map/</guid>
      <description>&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;p&gt;在我们的场景下，nginx 的 upstream servers 是一堆容器。
容器的主机名不变，但其 ip 可能发生变化。
我希望在容器 ip 发生变化时，无需变更 nginx 的配置。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Get Funcname and Callername in Golang</title>
      <link>https://n4mine.github.io/post/get-funcname-and-callername-in-golang/</link>
      <pubDate>Wed, 21 Aug 2019 17:48:57 +0800</pubDate>
      
      <guid>https://n4mine.github.io/post/get-funcname-and-callername-in-golang/</guid>
      <description>&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;p&gt;在 golang 中，往往需要获知当前的函数名及其调用者。&lt;/p&gt;
&lt;p&gt;例如在监控场景，自动获取函数名的需求比较常见。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>15 分钟了解容器</title>
      <link>https://n4mine.github.io/post/understand-container-in-15-minutes/</link>
      <pubDate>Sat, 27 Jul 2019 20:02:57 +0800</pubDate>
      
      <guid>https://n4mine.github.io/post/understand-container-in-15-minutes/</guid>
      <description>&lt;h2 id=&#34;什么是容器&#34;&gt;什么是容器？&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://n4mine.github.io/img/upgrade-vr.png&#34; alt=&#34;upgrade vr&#34;&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;所谓容器，其实就像上图:&lt;br&gt;
把 VR 玩家放在一个其以为是家的地方(&lt;code&gt;chroot&lt;/code&gt;)，创造目标所需环境(&lt;code&gt;namespaces&lt;/code&gt;)，再定期定量的提供水、食物(&lt;code&gt;cgroups&lt;/code&gt;)供其维续生命。&lt;/p&gt;
&lt;p&gt;chroot、namespace、cgroups，就是容器的核心技术。&lt;/p&gt;
&lt;p&gt;本文将使用几个有限的命令，用 15 分钟的时间，让读者直观的了解&lt;code&gt;容器&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LTTB 降采样算法初试</title>
      <link>https://n4mine.github.io/post/lttb-downsample/</link>
      <pubDate>Thu, 25 Jul 2019 17:44:41 +0800</pubDate>
      
      <guid>https://n4mine.github.io/post/lttb-downsample/</guid>
      <description>&lt;h2 id=&#34;降采样&#34;&gt;降采样&lt;/h2&gt;
&lt;p&gt;什么是降采样？在时序数据应用场景中，降采样通常是将&lt;code&gt;原始&lt;/code&gt;的 N 个数据点，通过某种算法计算，得到 1 个数据点，并在较长周期保存曲线趋势的算法。&lt;/p&gt;
&lt;p&gt;降采样带来的好处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;降低成本。例如将原来的 6 个数据点，降低为 1 个数据点。如此压缩比就是 6:1。而在一些复杂的场景下，6:1 已经是一个很高的比例。&lt;/li&gt;
&lt;li&gt;减少计算。降采后，前端的绘图速度和资源占用也会得到极大的优化。&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>cacheserver - 内存TSDB的设计思想</title>
      <link>https://n4mine.github.io/post/cacheserver-in-memory-tsdb-design/</link>
      <pubDate>Mon, 22 Jul 2019 22:14:31 +0800</pubDate>
      
      <guid>https://n4mine.github.io/post/cacheserver-in-memory-tsdb-design/</guid>
      <description>&lt;h2 id=&#34;cacheserver是什么&#34;&gt;cacheserver是什么?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基于facebook 的 gorilla paper 的一个服务。在内存中实现的，一个高性能、高压缩比的时序数据库&lt;/li&gt;
&lt;li&gt;其原理在以前的blog中有过描述, 见 &lt;a href=&#34;https://n4mine.github.io/post/in-memory-tsdb/#%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%AE%9E%E7%8E%B0&#34;&gt;Falcon 存储优化: 高性能内存 TSDB 的诞生#数据模型的实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;本文主要描述在设计 cacheserver 过程中的一些思考&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>浅谈监控层次模型</title>
      <link>https://n4mine.github.io/post/monitoring-system-hierarchy/</link>
      <pubDate>Thu, 18 Jul 2019 15:37:11 +0800</pubDate>
      
      <guid>https://n4mine.github.io/post/monitoring-system-hierarchy/</guid>
      <description>&lt;p&gt;&lt;!-- raw HTML omitted --&gt;开局一张图，剩下全靠编。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Falcon 存储优化: 高性能内存 TSDB 的诞生</title>
      <link>https://n4mine.github.io/post/in-memory-tsdb/</link>
      <pubDate>Mon, 04 Mar 2019 14:48:36 +0800</pubDate>
      
      <guid>https://n4mine.github.io/post/in-memory-tsdb/</guid>
      <description>&lt;h2 id=&#34;tsdb&#34;&gt;TSDB&lt;/h2&gt;
&lt;p&gt;先说 TSDB（时序数据库）是什么，下面的定义引用自 &lt;a href=&#34;https://en.wikipedia.org/wiki/Time_series_database&#34;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A time series database (TSDB) is a software system that is optimized for handling time series data, arrays of numbers indexed by time (a datetime or a datetime range).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Influxdb&lt;/code&gt;，&lt;code&gt;Graphite&lt;/code&gt;，&lt;code&gt;RRDtool&lt;/code&gt;，&lt;code&gt;OpenTSDB&lt;/code&gt;等都是当下流行的TSDB实现。&lt;/p&gt;
&lt;p&gt;TSDB 多应用于监控系统等场景。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Falcon存储做过的那些优化</title>
      <link>https://n4mine.github.io/post/optimize-falcon-graph/</link>
      <pubDate>Thu, 21 Feb 2019 15:03:20 +0800</pubDate>
      
      <guid>https://n4mine.github.io/post/optimize-falcon-graph/</guid>
      <description>&lt;p&gt;我司监控系统的底层存储架构使用的是 &lt;a href=&#34;https://github.com/open-falcon/falcon-plus&#34;&gt;open-falcon&lt;/a&gt;，作为非常流行的中小企业监控解决方案，open-falcon非常优秀。&lt;/p&gt;
&lt;p&gt;但在我司，指标量一度达到3亿+，且受限于成本等原因。falcon的存储组件就暴露出了一些性能问题。&lt;/p&gt;
&lt;p&gt;本文从一个开发者的角度，阐述自本人接手以来对 &lt;code&gt;graph&lt;/code&gt;(open-falcon的存储组件) 做过的一些优化工作，欢迎各位指正。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>监控系统构建实践之传输篇</title>
      <link>https://n4mine.github.io/post/the-practice-of-buiding-monitoring-system-transfer/</link>
      <pubDate>Wed, 05 Dec 2018 14:43:45 +0800</pubDate>
      
      <guid>https://n4mine.github.io/post/the-practice-of-buiding-monitoring-system-transfer/</guid>
      <description>&lt;p&gt;在上一篇文章采集篇的事情做完后，源数据就已经有了，但应该如何上报到存储就是接下来要考虑到的事情。&lt;br&gt;
本文结合我司在传输链路的建设，简述一下期间的一点思考。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计算进程的CPU占用率</title>
      <link>https://n4mine.github.io/post/calculate-the-cpu-usage-of-a-process/</link>
      <pubDate>Tue, 03 Jul 2018 11:28:34 +0800</pubDate>
      
      <guid>https://n4mine.github.io/post/calculate-the-cpu-usage-of-a-process/</guid>
      <description>&lt;h2 id=&#34;基于procpidstat和procstat计算指定进程的cpu利用率&#34;&gt;基于/proc/[pid]/stat和/proc/stat计算指定进程的cpu利用率&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;corenum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;nproc --all&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;xxx
&lt;span class=&#34;nv&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;pidof &lt;span class=&#34;nv&#34;&gt;$p&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;p_totaltime1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{print $14+$15}&amp;#39;&lt;/span&gt; /proc/&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/stat&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;totaltime1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{if($1==&amp;#34;cpu&amp;#34;){for(i=2;i&amp;lt;=NF;i++){sum+=$i}}}END{print sum}&amp;#39;&lt;/span&gt; /proc/stat&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
sleep &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 为什么是3, 要得到与top相同的结果&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;p_totaltime2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{print $14+$15}&amp;#39;&lt;/span&gt; /proc/&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/stat&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;totaltime2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{if($1==&amp;#34;cpu&amp;#34;){for(i=2;i&amp;lt;=NF;i++){sum+=$i}}}END{print sum}&amp;#39;&lt;/span&gt; /proc/stat&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;BEGIN{print &amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$p_totaltime2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$p_totaltime1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;)*100/(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$totaltime2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$totaltime1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;)*&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$corenum&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$res&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>监控系统构建实践-采集篇</title>
      <link>https://n4mine.github.io/post/the-practice-of-buiding-monitoring-system-collector/</link>
      <pubDate>Mon, 30 Apr 2018 17:12:45 +0800</pubDate>
      
      <guid>https://n4mine.github.io/post/the-practice-of-buiding-monitoring-system-collector/</guid>
      <description>&lt;h2 id=&#34;写在前面&#34;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;监控系统这个话题很大。&lt;br&gt;
但一个基本的监控系统归纳起来，无非也就是数据采集、传输、存储、查询这么几个部分。&lt;br&gt;
本文尝试从宏观上分析这几个模块在实践上遇到的一些问题，在我司的&lt;del&gt;最佳实践&lt;/del&gt;解法，及本人对各个模块在实践中的一些思考。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Open-Falcon更换hash算法</title>
      <link>https://n4mine.github.io/post/open-falcon-change-hash-algorithm/</link>
      <pubDate>Sat, 10 Mar 2018 17:06:29 +0800</pubDate>
      
      <guid>https://n4mine.github.io/post/open-falcon-change-hash-algorithm/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;原生的open-falcon使用一致性哈希来进行存储的分片。其使用到的一致性哈希算法库是&lt;a href=&#34;https://github.com/stathat/consistent&#34;&gt;github.com/stathat/consistent&lt;/a&gt;&lt;br&gt;
这个库使用了CRC32作为hash算法。CRC32用于一致性哈希时，结果是非常不均匀的。&lt;br&gt;
而且open-falcon只使用500个虚拟节点，统计进到graph的点数速度，标准差结果甚至到了15k+。&lt;br&gt;
更换hash算法成为当务之急。&lt;/p&gt;
&lt;p&gt;我们将&lt;code&gt;CRC32 + 500虚拟节点&lt;/code&gt;，变成了&lt;code&gt;murmur3 + 10000虚拟节点&lt;/code&gt;, 看官可能觉得在跑着业务的系统上，难度很高，而实际上整个过程简单的一逼&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用sync.Pool引起的case一例</title>
      <link>https://n4mine.github.io/post/a-case-when-using-sync.pool/</link>
      <pubDate>Tue, 27 Feb 2018 15:12:20 +0800</pubDate>
      
      <guid>https://n4mine.github.io/post/a-case-when-using-sync.pool/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;open-falcon的graph模块占用内存太多, 即发起了graph的内存优化，在上线过程中发生了曲线值异常的问题&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>通过pprof获取golang gc信息</title>
      <link>https://n4mine.github.io/post/get-golang-gc-info-by-pprof/</link>
      <pubDate>Sat, 04 Nov 2017 10:23:25 +0000</pubDate>
      
      <guid>https://n4mine.github.io/post/get-golang-gc-info-by-pprof/</guid>
      <description>背景 服务在开启了pprof的情况下，可以使用如下方式，简单粗暴的的获取gc情况 实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/bin/bash _lastNumGC=0 _first=true while : ; do r=$(curl -s</description>
    </item>
    
    <item>
      <title>使用iterm2的coprocess完成自动登录</title>
      <link>https://n4mine.github.io/post/autologin-with-iterm2-coprocess/</link>
      <pubDate>Mon, 25 Sep 2017 18:10:41 +0000</pubDate>
      
      <guid>https://n4mine.github.io/post/autologin-with-iterm2-coprocess/</guid>
      <description>&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;p&gt;日常工作中，经常需要通过跳板机登录线上机器。&lt;br&gt;
而为了安全起见，系统部的同学又启用了otp，动态生成code&lt;br&gt;
给经常登录线上机器的使用者，带来了很大不便&lt;/p&gt;
&lt;p&gt;作为iterm2的使用者，其coprocess的功能，可以实现自动登录，极大减少了手工输入动态密码及个人密码的次数。&lt;br&gt;
什么是iterm2的coprocess，可参见其官方说明 &lt;a href=&#34;https://www.iterm2.com/documentation-coprocesses.html&#34;&gt;coprocesses&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>organizing golang projects and dependencies</title>
      <link>https://n4mine.github.io/post/organizing-golang-projects-and-dependencies/</link>
      <pubDate>Sun, 15 Jan 2017 14:49:18 +0000</pubDate>
      
      <guid>https://n4mine.github.io/post/organizing-golang-projects-and-dependencies/</guid>
      <description>&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;p&gt;golang的依赖一直是让人头疼的问题, 大家对其自有的package管理也是褒贬不一&lt;br&gt;
而对于一个公司内部项目来讲, 主要的需求有以下几点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方便的依赖包版本管理&lt;/li&gt;
&lt;li&gt;方便协同开发&lt;/li&gt;
&lt;li&gt;尽可能不依赖其编译所在环境&lt;/li&gt;
&lt;li&gt;除基础包之外, 第三方包尽可能的自包含&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基于此, 有了本文, 打算以最小的环境变更及工具, 打造一个可协同工作的golang projects&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>调用服务端随机性连接超时case一例</title>
      <link>https://n4mine.github.io/post/random-connection-timeout/</link>
      <pubDate>Wed, 05 Oct 2016 09:47:13 +0000</pubDate>
      
      <guid>https://n4mine.github.io/post/random-connection-timeout/</guid>
      <description>&lt;h1 id=&#34;现象&#34;&gt;现象&lt;/h1&gt;
&lt;p&gt;业务同学反馈，A服务调用B服务有连接超时&lt;/p&gt;
&lt;h1 id=&#34;环境&#34;&gt;环境&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;src：A服务, 以下均用src代指&lt;/li&gt;
&lt;li&gt;dst：B服务, 以下均用dst代指&lt;/li&gt;
&lt;li&gt;B服务通过lvs + nginx的方式对外服务&lt;/li&gt;
&lt;li&gt;A服务连接超时设置为500ms&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
